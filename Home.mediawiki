== Welcome to the OpenFlow tutorial! ==

OpenFlow is an open interface for remotely controlling the forwarding tables in network switches, routers, and access points.  Upon this low-level primitive, researchers can build networks with new high-level properties.  For example, OpenFlow enables more secure default-off networks, wireless networks with smooth handoffs, scalable data center networks, host mobility, more energy-efficient networks and new wide-area networks – to name a few.

This tutorial is your opportunity to gain hands-on experience with the platforms and debugging tools most useful for developing network control applications on OpenFlow. This page contains some material to get you started with Openflow and Mininet. Check the side bar on the right for a list of assignments to walk you through everything from the creation of your virtual machine to the implementation of an openflow router.

'''The sidebar to the right is an index to the various sections of the tutorial. A good place to start is [[Installing Required Software]].'''

'''Innovate in your network!'''

'''Active ONS Tutorial Slides (4/16/2012):'''
* Main Slides [http://www.stanford.edu/~brandonh/ONS/OpenFlowTutorial_ONS_Heller.pptx pptx], [https://web.archive.org/web/20130116072451/http://www.stanford.edu/~brandonh/ONS/OpenFlowTutorial_ONS_Heller.pdf pdf]
* Virtualization
* Controller Showdown
* Deployment Experiences

'''Archived Tutorial Slides:'''
* [http://opennetsummit.org/ OpenNetSummit] Tutorial (10/19/2011)
** Main Slides: [http://stanford.edu/~brandonh/downloads/OpenFlowTutorial_ONS.pdf pdf], [http://stanford.edu/~brandonh/downloads/OpenFlowTutorial_ONS.pptx pptx]
** Deployment Forum:
*** Johan van Reijendam (Stanford): [http://stanford.edu/~brandonh/downloads/jvanreij.tgz tgz]
*** David Erickson (Stanford): [http://yuba.stanford.edu/~derickso/docs/ons_deployment_panel.pptx pptx]
*** Subhasree Mandal (Google): [http://www.openflow.org/wk/images/0/0f/OpenFlowTutorial-Google.pdf pdf]



__TOC__


=Overview=

[[images/Tutorial_flow_hw.png]]

In this tutorial, you'll turn the provided hub controller into a controller-based learning switch, then a flow-accelerated learning switch, and extend this from a single-switch network to a multiple-switch multiple-host network. You can also find guidelines for further extensions. Along the way, you'll learn the full suite of OpenFlow debugging tools.  You will:
* view flow tables with dpctl
* dissect OpenFlow message with Wireshark
* simulate a multi-switch, multi-host network with Mininet
* benchmark your controller with cbench

After the tutorial, you can apply what you've learned to physical networks based on software switches, NetFPGAs, or even hardware switches at line rate.

To get you started quickly, we provide a preconfigured virtual machine with the needed software.  

==Pre-requisites==
You will need a computer with at least 1GB (preferably 2GB+) of RAM and at least 5GB of free hard disk space (more preferred).  A faster processor may speed up the virtual machine boot time, and a larger screen may help to manage multiple terminal windows.

These instructions consider Linux, OS X, and Windows.  Linux and OS X are preferred - there's less to install.

You will need administrative access to the machine.

The tutorial instructions require no prior knowledge of OpenFlow.  The [http://www.openflowswitch.org/wp/learnmore/ OpenFlow Learn More page] is a concise introduction, and more information is available from the
[https://www.opennetworking.org/sdn-resources/openflow Open Networking Foundation].

== Stuck?  Found a bug?  Questions?  ==
Email openflow-discuss - at - lists.stanford.edu if you're stuck, think you've found a bug, or just want to send some feedback.

If you are asking a question or reporting a bug, try to include as many details about your setup as possible.  Include your OS, virtualization software info, X11 and ssh software you're using, VM image you're using, memory size, and the step you're on.







=Learn More=

==OpenFlow==

To learn more about OpenFlow in general, consult the [https://www.opennetworking.org/sdn-resources/openflow  Open Networking Foundation OpenFlow site] and the [http://www.openflowswitch.org historical OpenFlow page].  There are videos, blog entries, and more.  Check the wiki for link to OpenFlow-based projects and demos.

==Additional Tools==
*[http://mininet.org Mininet].
*[https://openflow.stanford.edu/display/DOCS/Flowvisor FlowVisor].

<!--

==Old Regression Tests==
Note: you will need to install additional stuff to get the old regression tests working.  See the install instructions for your platform, referenced at the top of the [http://openflow.org/wk OpenFlow wiki]

The OpenFlow reference distribution includes a set of tests to verify that an OpenFlow switch correctly sends and receives packets.  In this section, you'll run through some of the "Black Box" tests, where the regression switch acts as a controller and verifies that a switch responds properly to OpenFlow messages, as well as properly forwards packets sent to the input ports of the switch.  The Black Box regression tests use this layout:


[[images/Regression_tests.png]]
 

First, exit from the Mininet console:
 mininet> exit

To run the tests, log in as root, from the same SSH terminal:
 $ sudo su

Run a script to start up virtual ethernet pairs locally.
 # openflow/regress/bin/veth_setup.pl 

Veth0 connects to veth1, for example, and anytime a packet is sent to veth0, it'll pop out veth1, and vice versa.  The regression suite will allocate four veth pair halves to a software OpenFlow switch and the other four to the test suite, which sends packets and checks the contents and locations of responses.

In an SSH terminal:
 # ifconfig -a

You should see 8 new virtual interfaces, veth0..veth7.

Configure Wireshark to show OpenFlow messages and TCP resets in red (which delimit individual tests).  In the Wireshark filter box, enter:
 of || tcp.flags.reset == 1

Start running the tests, with Wireshark running on lo (loopback interface):
 # openflow/regress/bin/of_kmod_veth_test.pl

You may see OpenFlow messages for each test - if not, hit Ctrl-C to stop the tests, and clean up any leftover state:
 # openflow/regress/bin/of_kmod_veth_teardown.pl

Sometimes on the first run, the tests fail; we're not sure why this is happening.  Restart after tearing down and they should work.  

Then, re-run the tests:
 # openflow/regress/bin/of_kmod_veth_test.pl

When you get bored, stop the tests and check the messages.  Then clean up any state:
 # openflow/regress/bin/of_kmod_veth_teardown.pl

The regression suite is useful for verifying new switch features, as well as diagnosis divergent behavior between different switches.  The suite is generally used with 4 physical ports on hardware switches.  We won't do anything more with it in this tutorial, but feel free to peruse the code.  See the openflow/regress/projects/black_box directory, which has a file for each test.

To teardown virtual ethernet pairs, run:
 # openflow/regress/bin/veth_teardown.pl 

A replacement test suite is in the making, and is expected for mid 2010.  The new suite will be based on Python and reorganized to make switch-specific tests and port configurations much easier to define and debug.

Exit back to regular username:
 # exit

-->

=Credits=

This tutorial was originally written by Brandon Heller and Yiannis Yiakoumis and beta-tested by Bob Lantz, KK Yap and Masayoshi Kobayashi.

<!--

=Notes=

==VM Creation Notes==

The current Tutorial VM is simply a Mininet VM.
-->

<!-- 
<pre>
# Older ONS Tutorial Setup

http://releases.ubuntu.com/natty/
ubuntu-11.04-server-i386.iso

Name: OpenFlowTutorial
Disk Type: Dynamically Expanding
Size: 6GB

Ubuntu Setup:
Hostname: openflowtutorial
Default to all options.
username openflow, password openflow
No packages selected.

See http://yuba.stanford.edu/foswiki/bin/view/OpenFlow/MininetVMCreationNotes

sudo apt-get install -y git-core
sudo apt-get install python-setuptools
git clone --depth 1 git://github.com/mininet/mininet.git
cd mininet 
sudo make install
cd ..

# Install latest NOX:
# From http://noxrepo.org/noxwiki/index.php/NOX_Installation#Debian.2FUbuntu
cd nox
git remote add noxtutorial git@gitosis.stanford.edu:nox-tutorial.git
git fetch noxtutorial
git checkout -b cs244-tutorial noxtutorial/cs244-tutorial

cd /etc/apt/sources.list.d
sudo wget http://openflowswitch.org/downloads/debian/nox.list
sudo apt-get update
sudo apt-get install nox-dependencies

# Build NOX:
cd nox
./boot.sh
mkdir build/
cd build/
../configure
make -j 5

# Standard install:
cd ~/
time ~/mininet/util/install.sh

# Add to /etc/network/interfaces:
auto eth1
iface eth1 inet dhcp

# Set capture privileges:
# from http://wiki.wireshark.org/CaptureSetup/CapturePrivileges
sudo setcap cap_net_raw=+ep /usr/bin/dumpcap

# PRE-SHIP INSTRUCTIONS

# Ensure we don’t provide the solution by default!
cd nox
git reset --hard HEAD

# Remove authorized hosts file, pre-ship:
rm -f ~/.ssh/authorized_keys
rm -f ~/.ssh/known_hosts

# Switch to use read-only form of Mininet:
cd mininet
git remote rm origin
git remote add origin git://github.com/mininet/mininet.git
git fetch

# QUICK TEST
cd ~/nox/build/src
./nox_core -i ptcp: -v pytutorial
sudo mn --topo single,3 --mac --switch ovsk --controller remote
</pre>
-->